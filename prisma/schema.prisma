// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//this is the place where we write all our prisma code here that under the hood gets converted into sql queries 

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")  //database_url is stored in the .env file 
}

//same as create table users ( id serial primary key , email , name ....) what we did in sql queries --> under the hood the below code gets converted into that sql query only 

model User {
  id Int @id @default(autoincrement()) //@id is primary key and autoincrement is serial
  email String @unique
  firstName String
  lastName String
  password String
  todos Todo[]
}

model Todo {
  id Int @id @default(autoincrement())
  title String
  description String?
  done Boolean @default(false)
  userId Int  //every todo should have an associated user id 
  user User @relation(fields: [userId] , references: [id]) //this is how we do relationships in prisma 
}
//we created the migrations folder which keeps all the tracks of the sql queries that are ran in prisma throughout the project 
//we defined the schemas of the table for our database , what we need to do next is 
// we have to make autogenerated clients that is by running a command those clients will help us to make basic CRUD operations to our database tables 
//we generate this auto generated clients by running the command (npx prisma generate) in our terminal 





